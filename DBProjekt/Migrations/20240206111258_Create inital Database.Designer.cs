// <auto-generated />
using System;
using DBProjekt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBProjekt.Migrations
{
    [DbContext(typeof(DBProjektDbContext))]
    [Migration("20240206111258_Create inital Database")]
    partial class CreateinitalDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DBProjekt.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"), 1L, 1);

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseID = 1,
                            CourseType = "English"
                        },
                        new
                        {
                            CourseID = 2,
                            CourseType = "Science"
                        },
                        new
                        {
                            CourseID = 3,
                            CourseType = "Math"
                        });
                });

            modelBuilder.Entity("DBProjekt.Models.Departments", b =>
                {
                    b.Property<int>("DeparmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeparmentID"), 1L, 1);

                    b.Property<string>("Deparment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeparmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DeparmentID = 1,
                            Deparment = "Teacher"
                        },
                        new
                        {
                            DeparmentID = 2,
                            Deparment = "Admin"
                        },
                        new
                        {
                            DeparmentID = 3,
                            Deparment = "IT"
                        },
                        new
                        {
                            DeparmentID = 4,
                            Deparment = "HeadMaster"
                        });
                });

            modelBuilder.Entity("DBProjekt.Models.Grade", b =>
                {
                    b.Property<int>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeID"), 1L, 1);

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradeID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("DBProjekt.Models.SchoolInfo", b =>
                {
                    b.Property<int>("SchoolInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolInfoID"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GradeTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("SchoolInfoID");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("SchoolInfo");
                });

            modelBuilder.Entity("DBProjekt.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffID"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int>("YearsWorked")
                        .HasColumnType("int");

                    b.HasKey("StaffID");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffID = 1,
                            DepartmentId = 3,
                            FirstName = "Anas",
                            LastName = "Qlok",
                            Salary = 31500,
                            YearsWorked = 3
                        },
                        new
                        {
                            StaffID = 2,
                            DepartmentId = 3,
                            FirstName = "Tobias",
                            LastName = "KloQ",
                            Salary = 30500,
                            YearsWorked = 6
                        },
                        new
                        {
                            StaffID = 3,
                            DepartmentId = 2,
                            FirstName = "Reinar",
                            LastName = "SöderLund",
                            Salary = 29400,
                            YearsWorked = 2
                        },
                        new
                        {
                            StaffID = 4,
                            DepartmentId = 1,
                            FirstName = "Margareta",
                            LastName = "Danielsson",
                            Salary = 28500,
                            YearsWorked = 8
                        },
                        new
                        {
                            StaffID = 5,
                            DepartmentId = 1,
                            FirstName = "Lukas",
                            LastName = "Andersson",
                            Salary = 26500,
                            YearsWorked = 3
                        },
                        new
                        {
                            StaffID = 6,
                            DepartmentId = 1,
                            FirstName = "Pontus",
                            LastName = "Lövgren",
                            Salary = 23500,
                            YearsWorked = 5
                        },
                        new
                        {
                            StaffID = 7,
                            DepartmentId = 4,
                            FirstName = "Svante",
                            LastName = "Svanslös",
                            Salary = 38500,
                            YearsWorked = 10
                        });
                });

            modelBuilder.Entity("DBProjekt.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"), 1L, 1);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = 1,
                            FName = "Anton",
                            LName = "Larsson",
                            PersonalNumber = "9309302312",
                            StudentClass = "A"
                        },
                        new
                        {
                            StudentID = 2,
                            FName = "Alfred",
                            LName = "Larsson",
                            PersonalNumber = "9502152255",
                            StudentClass = "B"
                        },
                        new
                        {
                            StudentID = 3,
                            FName = "Maureen",
                            LName = "Supit",
                            PersonalNumber = "93121926677",
                            StudentClass = "A"
                        },
                        new
                        {
                            StudentID = 4,
                            FName = "Sara",
                            LName = "Lövström",
                            PersonalNumber = "9505252222",
                            StudentClass = "B"
                        },
                        new
                        {
                            StudentID = 5,
                            FName = "Daniel",
                            LName = "Strömsson",
                            PersonalNumber = "9607109888",
                            StudentClass = "C"
                        },
                        new
                        {
                            StudentID = 6,
                            FName = "Emma",
                            LName = "Svensson",
                            PersonalNumber = "9604051111",
                            StudentClass = "C"
                        });
                });

            modelBuilder.Entity("DBProjekt.Models.SchoolInfo", b =>
                {
                    b.HasOne("DBProjekt.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBProjekt.Models.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBProjekt.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBProjekt.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DBProjekt.Models.Staff", b =>
                {
                    b.HasOne("DBProjekt.Models.Departments", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });
#pragma warning restore 612, 618
        }
    }
}
